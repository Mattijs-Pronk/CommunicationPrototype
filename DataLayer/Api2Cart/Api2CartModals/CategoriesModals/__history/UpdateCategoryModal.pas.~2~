unit UpdateCategoryModal;

interface

uses System.SysUtils, System.Classes, System.StrUtils, IdURI, System.Rtti, System.Variants, TypInfo;

type
  TProductVariantUpdate = class
    private
    TName: string;
    TDescription: string;
    TParent_id: string;
    TStores_ids: string;
    TStore_id: string;
    TLang_id: string;
    TAvail: string;
    TMeta_description: string;
    TMeta_keywords: string;
  public
    property name: string read TName write TName;
    property description: string read TDescription write TDescription;
    property parent_id: string read TParent_id write TParent_id;
    property stores_ids: string read TStores_ids write TStores_ids;
    property store_id: string read TStore_id write TStore_id;
    property lang_id: string read TLang_id write TLang_id;
    property avail: string read TAvail write TAvail;
    property meta_description: string read TMeta_description write TMeta_description;
    property meta_keywords: string read TMeta_keywords write TMeta_keywords;

    function CreateObject(): String;
end;

implementation

function TProductVariantUpdate.CreateObject: String;
var
  Params: TStringList;
  Context: TRttiContext;
  Prop: TRttiProperty;
  PropValue: TValue;
begin
  Params := TStringList.Create;
  try
    Params.Delimiter := '&';

    Context := TRttiContext.Create;
    try
      for Prop in Context.GetType(Self.ClassInfo).GetProperties do
      begin
        if Prop.IsReadable then
        begin
          PropValue := Prop.GetValue(Self);
          if not PropValue.IsEmpty and (PropValue.AsType<string> <> '') then
            Params.Add(TIdURI.ParamsEncode(Prop.Name) + '=' + TIdURI.ParamsEncode(PropValue.ToString));
        end;
      end;
    finally
      Context.Free;
    end;

    Result := Params.DelimitedText;
  finally
    Params.Free;
  end;
end;

end.
