unit AddProductsModal;

interface

TProductAdd = class
    private
      Tname, TModel, TDescription, Tprice, Tspecial_price, Tsprice_create,
      Tsprice_expire, Tavailable_for_view, Tweight, Twidth, Theight, Tlength,
      Tshort_description, Tquantity, Tbackorder_status, Tcreated_at,
      Tcategories_ids, Ttype, Turl, Tordered_count, Tmanage_stock, Tin_stock,
      Tdownloadable, Tmeta_keywords, Ttags, Tlang_id, Tgtin, Tean,
      Twarehouse_id, Tis_virtual, Told_price, Tcost_price, Tavailable_for_sale,
      Tweight_unit, Tmanufacturer, Tmeta_title, Tmeta_description, Tbarcode,
      Ttaxable, Tseo_url, Tharmonized_system_code, Tcountry_of_origin,
      Tsearch_keywords: String;
    public
      property name: string read Tname write Tname;
      property model: string read Tmodel write Tmodel;
      property description: string read Tdescription write Tdescription;
      property price: string read Tprice write Tprice;
      property special_price: string read Tspecial_price write Tspecial_price;
      property sprice_create: string read Tsprice_create write Tsprice_create;
      property sprice_expire: string read Tsprice_expire write Tsprice_expire;
      property available_for_view: string read Tavailable_for_view write Tavailable_for_view;
      property weight: string read Tweight write Tweight;
      property width: string read Twidth write Twidth;
      property height: string read Theight write Theight;
      property length: string read Tlength write Tlength;
      property short_description: string read Tshort_description write Tshort_description;
      property quantity: string read Tquantity write Tquantity;
      property backorder_status: string read Tbackorder_status write Tbackorder_status;
      property created_at: string read Tcreated_at write Tcreated_at;
      property categories_ids: string read Tcategories_ids write Tcategories_ids;
      property _type: string read Ttype write Ttype;
      property url: string read Turl write Turl;
      property ordered_count: string read Tordered_count write Tordered_count;
      property manage_stock: string read Tmanage_stock write Tmanage_stock;
      property in_stock: string read Tin_stock write Tin_stock;
      property downloadable: string read Tdownloadable write Tdownloadable;
      property meta_keywords: string read Tmeta_keywords write Tmeta_keywords;
      property tags: string read Ttags write Ttags;
      property lang_id: string read Tlang_id write Tlang_id;
      property gtin: string read Tgtin write Tgtin;
      property ean: string read Tean write Tean;
      property warehouse_id: string read Twarehouse_id write Twarehouse_id;
      property is_virtual: string read Tis_virtual write Tis_virtual;
      property old_price: string read Told_price write Told_price;
      property cost_price: string read Tcost_price write Tcost_price;
      property available_for_sale: string read Tavailable_for_sale write Tavailable_for_sale;
      property weight_unit: string read Tweight_unit write Tweight_unit;
      property manufacturer: string read Tmanufacturer write Tmanufacturer;
      property meta_title: string read Tmeta_title write Tmeta_title;
      property meta_description: string read Tmeta_description write Tmeta_description;
      property barcode: string read Tbarcode write Tbarcode;
      property taxable: string read Ttaxable write Ttaxable;
      property seo_url: string read Tseo_url write Tseo_url;
      property harmonized_system_code: string read Tharmonized_system_code write Tharmonized_system_code;
      property country_of_origin: string read Tcountry_of_origin write Tcountry_of_origin;
      property search_keywords: string read Tsearch_keywords write Tsearch_keywords;
      function CreateObject(): String;
  end;

implementation

function TProductAdd.CreateObject: string;
var
  Params: TStringList;
  Context: TRttiContext;
  Prop: TRttiProperty;
  PropValue: TValue;
begin
  Params := TStringList.Create;
  try
    Params.Delimiter := '&';

    Context := TRttiContext.Create;
    try
      for Prop in Context.GetType(Self.ClassInfo).GetProperties do
      begin
        if Prop.IsReadable then
        begin
          PropValue := Prop.GetValue(Self);
          if not PropValue.IsEmpty and (PropValue.AsType<string> <> '') then
            Params.Add(TIdURI.ParamsEncode(Prop.Name) + '=' + TIdURI.ParamsEncode(PropValue.ToString));
        end;
      end;
    finally
      Context.Free;
    end;

    Result := Params.DelimitedText;
  finally
    Params.Free;
  end;
end;

end.
