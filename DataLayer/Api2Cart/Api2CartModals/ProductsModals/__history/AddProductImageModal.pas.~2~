unit AddProductImageModal;

interface

uses System.SysUtils, System.Classes, System.StrUtils, IdURI, System.Rtti, System.Variants, TypInfo;

type
TProductUpdate = class
    private
      Tid, Tprice, Tspecial_price, Tsprice_create, Tsprice_expire, Tquantity,
      Tweight, Tlength, Theight, Twidth, Tincrease_quantity, Treduce_quantity,
      Tmanage_stock, Tbackorder_status, Tname, Tdescription, Tlang_id, Tin_stock,
      Tshort_description, Tsku, Tstore_id, Ttags, Tgtin, Tean, Tseo_url,
      Tcategories_ids, Tstatus, Twarehouse_id, Tis_virtual, Told_price, Tcost_price,
      Tbarcode, Tmanufacturer, Tmeta_title, Tmeta_description, Ttaxable,
      Tharmonized_system_code, Tcountry_of_origin, Tsearch_keywords: String;
    public
      property product_id: string read Tproduct_id write Tproduct_id;
      property image_name: string read Timage_name write Timage_name;
      property type_: string read Ttype write Ttype;
      property url: string read Turl write Turl;
      property label: string read Tlabel write Tlabel;
      property mime: string read Tmime write Tmime;
      property position: string read Tposition write Tposition;
      property content: string read Tcontent write Tcontent;
      property product_variant_id: string read Tproduct_variant_id write Tproduct_variant_id;
      property variant_ids: string read Tvariant_ids write Tvariant_ids;
      property store_id: string read Tstore_id write Tstore_id;
      function CreateObject(): String;
  end;

implementation

function TProductUpdate.CreateObject: String;
var
  Params: TStringList;
  Context: TRttiContext;
  Prop: TRttiProperty;
  PropValue: TValue;
begin
  Params := TStringList.Create;
  try
    Params.Delimiter := '&';

    Context := TRttiContext.Create;
    try
      for Prop in Context.GetType(Self.ClassInfo).GetProperties do
      begin
        if Prop.IsReadable then
        begin
          PropValue := Prop.GetValue(Self);
          if not PropValue.IsEmpty and (PropValue.AsType<string> <> '') then
            Params.Add(TIdURI.ParamsEncode(Prop.Name) + '=' + TIdURI.ParamsEncode(PropValue.ToString));
        end;
      end;
    finally
      Context.Free;
    end;

    Result := Params.DelimitedText;
  finally
    Params.Free;
  end;
end;

end.
