unit FindProductModal;

interface

uses System.SysUtils, System.Classes, System.StrUtils, IdURI, System.Rtti, System.Variants, TypInfo, System.JSON, vcl.Dialogs;

type
  TProductFind = class
  private
    Tfind_value, Tfind_where, Tfind_param, Tfind_what, Tlang_id, Tstore_id: string;
  public
    property find_value: string read Tfind_value write Tfind_value;
    property find_where: string read Tfind_where write Tfind_where;
    property find_param: string read Tfind_param write Tfind_param;
    property find_what: string read Tfind_what write Tfind_what;
    property lang_id: string read Tlang_id write Tlang_id;
    property store_id: string read Tstore_id write Tstore_id;

    function ReturnObject(content: String): TObjectList<TJSONObject>;
    function CreateObject(): String;
  end;

implementation

{ TProduct }

function TProductFind.ReturnObjects(content: String): TArray<TJSONObject>;
var
  jsonValue: TJSONValue;
  productArray: TJSONArray;
  i: Integer;
begin
  // Parse the JSON string into a TJSONValue
  jsonValue := TJSONObject.ParseJSONValue(content);

  try
    if Assigned(jsonValue) and (jsonValue is TJSONObject) then
    begin
      // Navigate through the structure to get to the products array
      productArray := (jsonValue as TJSONObject).GetValue('result').GetValue<TJSONArray>('product');

      if Assigned(productArray) then
      begin
        SetLength(Result, productArray.Count);

        // Iterate through each product in the array
        for i := 0 to productArray.Count - 1 do
        begin
          // Add the product to the result array
          Result[i] := productArray.Items[i] as TJSONObject;
        end;
      end;
    end;
  finally
    jsonValue.Free;
  end;
end;









function TProductFind.CreateObject: String;
var
  Params: TStringList;
  Context: TRttiContext;
  Prop: TRttiProperty;
  PropValue: TValue;
begin
  Params := TStringList.Create;
  try
    Params.Delimiter := '&';

    Context := TRttiContext.Create;
    try
      for Prop in Context.GetType(Self.ClassInfo).GetProperties do
      begin
        if Prop.IsReadable then
        begin
          PropValue := Prop.GetValue(Self);
          if not PropValue.IsEmpty and (PropValue.AsType<string> <> '') then
            Params.Add(TIdURI.ParamsEncode(Prop.Name) + '=' + TIdURI.ParamsEncode(PropValue.ToString));
        end;
      end;
    finally
      Context.Free;
    end;

    Result := Params.DelimitedText;
  finally
    Params.Free;
  end;
end;

end.


